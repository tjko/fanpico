# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '30 8 * * 6'

env:
  BUILD_TYPE: Release
  # Pico-SDK version
  PICO_SDK_REF: 2.1.1
  PICOTOOL_REF: 2.1.1

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Arm GNU Toolchain (arm-none-eabi-gcc)
      uses: carlosperate/arm-none-eabi-gcc-action@v1

    - name: Cache Pico-SDK
      id: cache-pico-sdk
      uses: actions/cache@v4
      with:
        path: pico-sdk
        key: ${{runner.os}}-pico-sdk-${{env.PICO_SDK_REF}}

    - name: Checkout Pico-SDK
      if: ${{steps.cache-pico-sdk.outputs.cache-hit != 'true' }}
      uses: actions/checkout@v4
      with:
        repository: raspberrypi/pico-sdk
        ref: ${{env.PICO_SDK_REF}}
        path: pico-sdk
        submodules: recursive

    - name: Add PICO_SDK_PATH to Environment
      run: |
        echo "PICO_SDK_PATH=${{github.workspace}}/pico-sdk" >> $GITHUB_ENV

    - name: Cache picotool
      id: cache-picotool
      uses: actions/cache@v4
      with:
        path: picotool
        key: ${{runner.os}}-picotool-${{env.PICOTOOL_REF}}

    - name: Checkout picotool
      if: ${{steps.cache-picotool.outputs.cache-hit != 'true' }}
      uses: actions/checkout@v4
      with:
        repository: raspberrypi/picotool
        ref: ${{env.PICOTOOL_REF}}
        path: picotool-src
        submodules: recursive

    - name: Build picotool
      if: ${{steps.cache-picotool.outputs.cache-hit != 'true' }}
      run: |
        cmake -S picotool-src -B picotool-src/build -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/picotool -DPICOTOOL_FLAT_INSTALL=1
        cd picotool-src/build
        make -j ${{env.BUILD_THREADS}} install

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive


    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality


    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DPICO_BOARD=pico_w -DFANPICO_BOARD=0804D -Dpicotool_DIR=${{github.workspace}}/picotool/picotool

    - name: Build
      run: cmake --build build --config ${{env.BUILD_TYPE}}

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
